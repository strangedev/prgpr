package com.prgpr.framework.database;

import java.util.*;
import java.util.stream.Stream;

/**
 * @author Noah Hummel
 * Created by strange on 11/21/16
 *
 * Provides different frequently used traversals through a given graph database.
 * Here, traversals are Java8 Streams of Elements generated by a breadth first search
 * with various criteria.
 */
public abstract class TraversalProvider {

    public enum Direction {
        INCOMING,
        OUTGOING,
        BOTH
    }

    /**
     * Returns a traversal where each Element is only traversed once.
     * Only considers Relationships of certain types while traversing the graph.
     * Also only traverses relationships with a certain direction while expanding the traversal from any given Element.
     *
     * @param from Where to start the traversal.
     * @param relationshipTypes The RelationshipTypes to traverse.
     * @param direction The direction of RelationshipTypes which is traversed.
     * @return The traversal as stream of Elements.
     */
    public Stream<Element> traverseUnique(Element from, List<RelationshipType> relationshipTypes, Direction direction) {
        return getUniqueTraversal(from, relationshipTypes, direction);
    }

    /**
     * Returns a traversal where each Element is only traversed once.
     * Only considers Relationships of a certain type while traversing the graph.
     * Also only traverses relationships with a certain direction while expanding the traversal from any given Element.
     *
     * @param from Where to start the traversal.
     * @param relationshipType The RelationshipType to traverse.
     * @param direction The direction of RelationshipTypes which is traversed.
     * @return The traversal as stream of Elements.
     */
    public Stream<Element> traverseUnique(Element from, RelationshipType relationshipType, Direction direction) {
        return getUniqueTraversal(from, Collections.singletonList(relationshipType), direction);
    }

    /**
     * Returns a traversal where each Element is only traversed once.
     * Only considers Relationships of certain types while traversing the graph.
     * Also only traverses relationships with a certain direction while expanding the traversal from any given Element.
     * Does not traverse any Elements with a distance to the starting Element greater than a given depth.
     *
     * @param from Where to start the traversal.
     * @param relationshipTypes The RelationshipTypes to traverse.
     * @param direction The direction of RelationshipTypes which is traversed.
     * @param depth The maximum depth to which to expand the traversal.
     * @return The traversal as stream of Elements.
     */
    public Stream<Element> traverseUniqueToDepth(Element from, List<RelationshipType> relationshipTypes, Direction direction, int depth) {
        return getUniqueDepthLimitedTraversal(from, relationshipTypes, depth, direction);
    }

    /**
     * Returns a traversal where each Element is only traversed once.
     * Only considers Relationships of a certain type while traversing the graph.
     * Also only traverses relationships with a certain direction while expanding the traversal from any given Element.
     * Does not traverse any Elements with a distance to the starting Element greater than a given depth.
     *
     * @param from Where to start the traversal.
     * @param relationshipType The RelationshipType to traverse.
     * @param direction The direction of RelationshipTypes which is traversed.
     * @param depth The maximum depth to which to expand the traversal.
     * @return The traversal as stream of Elements.
     */
    public Stream<Element> traverseUniqueToDepth(Element from, RelationshipType relationshipType, Direction direction, int depth) {
        return getUniqueDepthLimitedTraversal(from, Collections.singletonList(relationshipType), depth, direction);
    }

    /**
     * Generalized method which implements the public methods of this class.
     * Used because of DRY.
     *
     * Returns a traversal where each Element is only traversed once.
     * Only considers Relationships of certain types while traversing the graph.
     * Also only traverses relationships with a certain direction while expanding the traversal from any given Element.
     * Does not traverse any Elements with a distance to the starting Element greater than a given depth.
     *
     * @param from Where to start the traversal.
     * @param relTypes The RelationshipTypes to traverse.
     * @param direction The direction of RelationshipTypes which is traversed.
     * @param depth The maximum depth to which to expand the traversal.
     * @return The traversal as stream of Elements.
     */
    protected abstract Stream<Element> getUniqueDepthLimitedTraversal(Element from, List<RelationshipType> relTypes, int depth, Direction direction);

    /**
     * Generalized method which implements the public methods of this class.
     * Used because of DRY.
     *
     * Returns a traversal where each Element is only traversed once.
     * Only considers Relationships of certain types while traversing the graph.
     * Also only traverses relationships with a certain direction while expanding the traversal from any given Element.
     *
     * @param from Where to start the traversal.
     * @param relTypes The RelationshipTypes to traverse.
     * @param direction The direction of RelationshipTypes which is traversed.
     * @return The traversal as stream of Elements.
     */
    protected abstract Stream<Element> getUniqueTraversal(Element from, List<RelationshipType> relTypes, Direction direction);
}
